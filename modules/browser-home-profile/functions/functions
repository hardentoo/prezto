#
# $Header: browser-home-profile/functions/functions      Exp $
# $Author: (c) 2015-6 -tclover <tokiclover@gmail.com>    Exp $
# $License: 2-clause/new/simplified BSD                  Exp $
# $Version: 1.3 2016/03/08 21:09:26                      Exp $
#

#
# @FUNCTION: Print error message to stderr
#
function pr-error {
	local PFX=${name:+%F{magenta}${name}:}
	print -P${print_info[eol]:+n} "${print_info[eol]}%B%F{red}ERROR:${PFX}%b%f ${@}" >&2
}

#
# @FUNCTION: Print info message to stdout
#
function pr-info {
	local PFX=${name:+%F{yellow}${name}:}
	print -P${print_info[eol]:+n} "${print_info[eol]}%B%F{blue}*INFO:${PFX}%b%f ${@}"
}

#
# @FUNCTION: Print warn message to stdout
#
function pr-warn {
	local PFX=${name:+%F{red}${name}:}
	print -P${print_info[eol]:+n} "${print_info[eol]}%B%F{yellow}WARN:${CLR_RST}${PFX}%f%b ${@}"
}

#
# @FUNCTION: Print begin message to stdout
#
function pr-begin {
	print -Pn "${print_info[eol]}"
	print_info[eol]="\n"
	print_info[len]=$((${#name}+${#*}))
	local PFX=${name:+%B%F{magenta}[%f%F{blue}${name}%f%F{magenta}]%f%b}
	print -Pn "${PFX} ${@}"
}

#
# @FUNCTION: Print end message to stdout
#
function pr-end {
	local SFX
	case ${1:-0} {
		(0) SFX="%F{blue}[%f%F{green}Ok%f%F{blue}]%f";;
		(*) SFX="%F{yellow}[%f%F{red}No%f%F{yellow}]%f";;
	}
	shift
	print_info[len]=$((${print_info[cols]}-${print_info[len]}))
	printf "%*b" ${print_info[len]} $(print -P "${@} %B${SFX}%b")
	print
	print_info[eol]= print_info[len]=0
}

#
# @FUNCTION: YES or NO helper
#
function yesno {
	case ${1:-NO} in
	(0|[Dd][Ii][Ss][Aa][Bb][Ll][Ee]|[Oo][Ff][Ff]|[Ff][Aa][Ll][Ss][Ee]|[Nn][Oo])
		return 1;;
	(1|[Ee][Nn][Aa][Bb][Ll][Ee]|[Oo][Nn]|[Tt][Rr][Uu][Ee]|[Yy][Ee][Ss])
		return 0;;
	(*)
		return 2;;
	esac
}

#
# @FUNCTION: Maintain tarball archive (un)pack accordingly
#
function bhp {
	local PROFILE ext name=bhp profile tarball
	zstyle -s ':prezto:module:BHP' PROFILE 'PROFILE'
	zstyle -s ':prezto:module:BHP' compressor 'compressor'
	ext=.tar.${compressor[(w)1]} profile=${PROFILE:t}

	for dir (${HOME}/.${PROFILE} ${HOME}/.cache/${PROFILE#config/}) {
		[[ -d ${dir} ]] || continue
		pr-begin "Setting up tarball..."
		pushd -q ${dir:h} || continue

		if [[ -f ${profile}/.unpacked ]]; then
			if [[ -f ${profile}${ext} ]] {
				mv -f ${profile}${ext} ${profile}.old${ext} ||
					{ pr-end 2 "Moving"; continue; }
			}
			tar -X ${profile}/.unpacked -cpf ${profile}${ext} \
				-I ${compressor} ${profile} ||
				{ pr-end 3 "Packing"; continue; }
		else
			if [[ -f ${profile}${ext} ]]; then
				tarball=${profile}${ext}
			elif [[ -f ${profile}.old${ext} ]]; then
				tarball=${profile}.old${ext}
			else
				pr-warn "No tarball found."; continue
			fi
			 tar -xpf ${tarball} -I ${compressor} &&
				 touch ${profile}/.unpacked || { pr-end 5 "Unpacking"; continue; }
		fi
		popd -q
		pr-end ${?}
	}
}

#
# @FUNCTION: Create temporary file/dir (mktemp wrapper or alike helper)
#
function mktmp {
	function mktmp-help {
		cat <<-EOH
	usage: mktmp [-p] [-d|-f] [-m mode] [-o owner[:group] TEMPLATE-XXXXXX
 	-d, --dir           (Create a) directory
  -f, --file          (Create a) file
  -o, --owner <name>  Use owner name
  -g, --group <name>  Use group name
  -m, --mode   1700   Use octal mode
  -p, --tmpdir[=DIR]  Enable mktmp mode
  -h, --help          Help/Exit
	EOH
	}

	if (( ${#} == 0 )) {
		mktmp-help
		return 1
	}

	local ARGS name=mktmp
	ARGS="$(getopt \
		-o dfg:hm:o:p: \
		-l dir,file,group:,tmpdir:,help,mode:owner: \
		-s sh -n mktmp -- "${@}")"
	if (( ${?} != 0 )) { mktmp-help; return 2; }
	eval set -- ${ARGS}
	ARGS=

	local group mode owner temp=-XXXXXX tmp type
	while true; do
		case ${1} {
			(-p|--tmpd*) tmpdir=${2:-${TMPDIR:-/tmp}}; shift;;
			(-h|--help) mktmp_help; return;;
			(-m|--mode)  mode=${2} ; shift;;
			(-o|--owner) owner=${2}; shift;;
			(-g|--group) group=${2}; shift;;
			(-d|--dir) ARGS=-d type=dir;;
			(-f|--file)  type=file;;
			(*) shift; break;;
		}
		shift
	done

	if ! ([[ ${#} == 1 ]] && [[ -n ${1} ]]); then
		pr-error "Invalid argument(s)"
		return 3
	fi
	case ${1} {
		(*${temp}) ;;
		(*) pr-error "Invalid TEMPLATE"; return 4;;
	}

	if (( ${+commands[mktemp]} )); then
		tmp="$(mktemp ${tmpdir:+-p} ${tmpdir} ${ARGS} ${1})"
	else
		(( ${+commands[uuidgen]} )) && temp=$(uuidgen --random)
		tmp="${tmpdir}/${1%-*}-${temp:1:6}"
	fi
	case ${type} {
		(dir) [[ -d ${tmp} ]] || mkdir -p ${tmp};;
		(*)   [[ -e ${tmp} ]] || { mkdir -p ${tmp:h}; touch  ${tmp}; };;
	}
	if (( ${?} != 0 )) {
		pr-error "Failed to create ${tmp}"
		return 5
	}
	[[ -h ${tmp} ]] && return
	(( -n ${owner} )) && chown ${owner} ${tmp}
	(( -n ${group} )) && chgrp ${group} ${tmp}
	(( -n ${mode}  )) && chmod ${mode}  ${tmp}
	print ${tmp}
}

#
# vim:fenc=utf-8:ft=zsh:ci:pi:sts=2:sw=2:ts=2:
#
